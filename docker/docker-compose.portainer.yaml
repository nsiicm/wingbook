services:
  postgres:
    image: postgres:14-alpine
    # ports:
    #   - 5432:5432
    volumes:
      - ${VOLUMES_LOCATION}/postgres:/var/lib/postgresql/data
    env_file:
      - ../stack.env
    networks:
      - wingbook
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wingbook"]
      interval: 5s
      timeout: 5s
      retries: 5
  db-backup:
    build:
      context: ../backup/
      dockerfile: Dockerfile
    env_file:
      - ../stack.env
    volumes:
      - ${VOLUMES_LOCATION}/backups:/backups
    depends_on:
      - postgres
    networks:
      - wingbook
  server:
    build:
      context: ../server/
      dockerfile: Dockerfile
    ports:
      - 8012:8000
    labels:
      - "traefik.http.routers.wingbook_api.rule=Host(`wingbook-api.nsimon.net`)"
      - "traefik.http.routers.wingbook_api.entrypoints=web"
      - "traefik.http.routers.wingbook_api.service=wingbook_api"
      - "traefik.http.services.wingbook_api.loadbalancer.server.port=8000"
    env_file:
      - ../stack.env
    networks:
      - wingbook
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ../server/wingbook/api/migrations:/app/wingbook/api/migrations
  front:
    build:
      context: ../front/
      dockerfile: Dockerfile
    ports:
      - 8013:3000
    labels:
      - "traefik.http.routers.wingbook_front.rule=Host(`wingbook.nsimon.net`)"
      - "traefik.http.routers.wingbook_front.entrypoints=web"
      - "traefik.http.routers.wingbook_front.service=wingbook_front"
      - "traefik.http.services.wingbook_front.loadbalancer.server.port=3000"
    env_file:
      - ../stack.env

networks:
  wingbook: